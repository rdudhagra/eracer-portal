{"version":3,"sources":["models/Waypoint.ts","components/util/WaypointMarker.tsx","components/MapView/MapView.tsx","hooks/useWindowSize.ts","components/util/ColorModeSwitcher.tsx","components/util/MapSatelliteSwitcher.tsx","components/util/TopBar.tsx","components/ConfigPanel/components/WaypointsList.tsx","components/ConfigPanel/ConfigPanel.tsx","App.tsx","theme.ts","index.tsx"],"names":["updateWaypoint","newWaypoint","waypoints","newWaypoints","Array","from","findIndex","x","key","WaypointMarker","props","iconColor","useColorModeValue","_jsx","FaMapMarker","onMouseEnter","onMap","setWaypoints","wps","_objectSpread","waypoint","active","onMouseLeave","size","style","translate","color","concat","highlight","zIndex","defaultProps","mapboxgl","workerClass","require","default","POLYLINE_SMOOTHING_FACTOR","POLYLINE_NUM_SEGMENTS","makeDrivePathLayer","pl","PathLayer","id","data","path","name","rounded","pickable","widthScale","widthMinPixels","widthMaxPixels","getColor","MapView","colorMode","mapContainer","useRef","_useWindowSize","_useState","useState","width","undefined","height","_useState2","_slicedToArray","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","onClick","useCallback","event","lon","lat","newWps","waypointIndex","splice","insertWaypoint","coordinate","uuid","insertIndex","setInsertIndex","CurveInterpolator","map","wp","tension","getPoints","setPolyline","points","Box","flex","display","ref","children","_jsxs","DeckGL","initialViewState","latitude","longitude","zoom","bearing","pitch","maxZoom","controller","touchRotate","touchZoom","layers","polyline","ContextProvider","_MapContext","Provider","StaticMap","mapStyle","satellite","attributionControl","Markers","markers","useMemo","index","Marker","draggable","onDragEnd","lngLat","_Fragment","ColorModeSwitcher","toggleColorMode","useColorMode","text","SwitchIcon","FaMoon","FaSun","bgColor","bgHoverColor","IconButton","fontSize","variant","bg","_hover","marginLeft","icon","MapSatelliteSwitcher","MdMap","MdPublic","setSatellite","iconProps","TopBar","buttonColor","textColor","outlineColor","outlineColorHover","Flex","w","px","py","shadow","pointerEvents","Heading","ps","Spacer","InputGroup","ms","borderColor","InputLeftAddon","FaGlobe","Text","Input","placeholder","_placeholder","InputRightElement","Button","m","colorScheme","WaypointsList","textBrightness","result","_result$destination","destination","_result$destination2","destinationIndex","source","arrayMove","DragDropContext","h","overflow","Droppable","droppableId","provided","snapshot","innerRef","droppableProps","ind","Draggable","draggableId","draggableProps","dragHandleProps","borderY","borderCollapse","alignItems","flexDirection","MdClose","cursor","removeWaypoint","length","toFixed","textAlign","whiteSpace","fileDownload","ConfigPanel","cardColor","headerBrightness","clearWaypoints","saveWaypoints","JSON","stringify","loadJsonInput","loadWaypoints","file","target","files","reader","FileReader","onload","parse","readAsText","alignSelf","minW","maxW","me","ButtonGroup","isAttached","type","onChange","current","click","App","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","minH","maxH","position","top","left","direction","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","React","ChakraProvider","ColorModeScript","document","getElementById"],"mappings":"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","file":"static/js/main.6ab314ca.chunk.js","sourcesContent":["import arrayMove from \"array-move\";\nimport { v4 as uuid } from \"uuid\";\n\nexport type Waypoint = {\n  key: string;\n  lat: number;\n  lon: number;\n  active: boolean;\n};\n\n// All of these functions return a modified copy of the waypoints array without\n// modifying the original. This is important so that React can properly manage\n// state and detect changes in the waypoints array, rerendering only what's needed.\nexport function updateWaypoint(newWaypoint: Waypoint, waypoints: Waypoint[]) {\n  let newWaypoints = Array.from(waypoints); // make copy\n  newWaypoints[waypoints.findIndex((x) => x.key === newWaypoint.key)] =\n    newWaypoint;\n  return newWaypoints;\n}\n\nexport function addWaypoint(newWaypoint: Waypoint, waypoints: Waypoint[]) {\n  return [...waypoints, newWaypoint];\n}\n\nexport function insertWaypoint(\n  newWaypoint: Waypoint,\n  waypointIndex: number,\n  waypoints: Waypoint[]\n) {\n  let newWaypoints = Array.from(waypoints); // make copy\n  newWaypoints.splice(waypointIndex, 0, newWaypoint);\n  return newWaypoints;\n}\n\nexport function removeWaypoint(waypoint: Waypoint, waypoints: Waypoint[]) {\n  let newWaypoints = Array.from(waypoints); // make copy\n  newWaypoints.splice(\n    waypoints.findIndex((x) => x.key === waypoint.key),\n    1\n  );\n  return newWaypoints;\n}\n\nexport function moveWaypoint(\n  waypointIndex: number,\n  destinationIndex: number,\n  waypoints: Waypoint[]\n) {\n  return arrayMove(waypoints, waypointIndex, destinationIndex);\n}\n\nexport function newWaypoint(lon: number, lat: number) {\n  return {\n    key: uuid(),\n    lat: lat,\n    lon: lon,\n    active: false,\n  } as Waypoint;\n}\n","import { useColorModeValue } from \"@chakra-ui/react\";\nimport { FaMapMarker } from \"react-icons/fa\";\nimport { updateWaypoint, Waypoint } from \"../../models/Waypoint\";\n\nexport const WaypointMarker = (props: {\n  waypoint: Waypoint;\n  setWaypoints: Function;\n  onMap: boolean;\n  highlight: boolean;\n}) => {\n  const iconColor = useColorModeValue(\"black\", \"white\");\n\n  return (\n    <FaMapMarker\n      onMouseEnter={() => {\n        if (props.onMap)\n          props.setWaypoints((wps: Waypoint[]) =>\n            updateWaypoint({ ...props.waypoint, active: true }, wps)\n          );\n      }}\n      onMouseLeave={() => {\n        if (props.onMap)\n          props.setWaypoints((wps: Waypoint[]) =>\n            updateWaypoint({ ...props.waypoint, active: false }, wps)\n          );\n      }}\n      size={props.onMap ? 35 : 30}\n      style={{\n        translate: props.onMap ? \"-50% -100%\" : \"\",\n        color: `var(--chakra-colors-${props.waypoint.active\n            ? iconColor\n            : (props.highlight ? \"yellow-400\" : \"red-500\")\n          })`,\n        zIndex: 1,\n      }}\n    />\n  );\n};\nWaypointMarker.defaultProps = { onMap: false, active: false };\n","import { Box } from \"@chakra-ui/layout\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nimport { useRef } from \"react\";\nimport { /*GeolocateControl, */Marker, StaticMap, _MapContext } from \"react-map-gl\";\n\nimport DeckGL from \"@deck.gl/react\";\nimport { PathLayer } from \"@deck.gl/layers\";\n\nimport mapboxgl from \"mapbox-gl\";\n\nimport { useWindowSize } from \"../../hooks/useWindowSize\";\nimport { useColorModeValue } from \"@chakra-ui/color-mode\";\n\nimport \"./mapview.scss\";\nimport {\n  insertWaypoint,\n  newWaypoint,\n  updateWaypoint,\n  Waypoint,\n} from \"../../models/Waypoint\";\nimport { WaypointMarker } from \"../util/WaypointMarker\";\n\nimport { CurveInterpolator } from \"curve-interpolator\";\nimport { useMemo } from \"react\";\nimport { useCallback } from \"react\";\n\n/* eslint-disable import/no-webpack-loader-syntax, import/no-unresolved */\n// @ts-ignore\nmapboxgl.workerClass =\n  require(\"worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker\").default;\n/* eslint-enable import/no-webpack-loader-syntax, import/no-unresolved */\n\nexport const POLYLINE_SMOOTHING_FACTOR = 0.9;\nexport const POLYLINE_NUM_SEGMENTS = 1000;\n\nexport const makeDrivePathLayer = (pl: any) =>\n  new PathLayer({\n    id: \"drive-path-layer\",\n    data: [\n      {\n        path: pl,\n        name: \"\",\n      },\n    ],\n    rounded: true,\n    pickable: false,\n    widthScale: 2,\n    widthMinPixels: 2,\n    widthMaxPixels: 6,\n    getColor: [11, 197, 234],\n  });\n\nexport const MapView = (props: {\n  satellite: boolean;\n  waypoints: Waypoint[];\n  setWaypoints: Function;\n  polyline: { points: any[]; path: any };\n  setPolyline: Function;\n  insertIndex: number;\n  setInsertIndex: Function;\n}) => {\n  const colorMode = useColorModeValue(\"light\", \"dark\");\n\n  const mapContainer = useRef(null);\n  const { width, height } = useWindowSize();\n\n  const viewport = {\n    latitude: 40.440349,\n    longitude: -79.942433,\n    zoom: 18,\n    bearing: 0,\n    pitch: 0,\n    maxZoom: 24,\n  };\n\n  const onClick = useCallback((event) => {\n    props.setWaypoints((wps: Waypoint[]) => {\n      let newWps = insertWaypoint(\n        newWaypoint(event.coordinate[0], event.coordinate[1]),\n        props.insertIndex,\n        wps\n      );\n      props.setInsertIndex(props.insertIndex + 1);\n      let pl = new CurveInterpolator(\n        newWps.map((wp) => [wp.lon, wp.lat]),\n        {\n          tension: POLYLINE_SMOOTHING_FACTOR,\n        }\n      ).getPoints(POLYLINE_NUM_SEGMENTS);\n      props.setPolyline({\n        points: pl,\n        path: makeDrivePathLayer(pl),\n      });\n      return newWps;\n    });\n    // eslint-disable-next-line\n  }, [props.insertIndex]);\n\n  return (\n    <Box flex={1} display=\"block\" ref={mapContainer}>\n      <DeckGL\n        initialViewState={viewport}\n        controller={{ touchRotate: true, touchZoom: true }}\n        onClick={onClick}\n        layers={[props.polyline.path]}\n        // @ts-ignore\n        ContextProvider={_MapContext.Provider}\n      >\n        <StaticMap\n          mapStyle={\n            props.satellite\n              ? \"mapbox://styles/mapbox/satellite-streets-v12\"\n              : `mapbox://styles/mapbox/${colorMode}-v11`\n          }\n          width={width}\n          height={height}\n          attributionControl={false}\n        />\n        <Markers\n          waypoints={props.waypoints}\n          setWaypoints={props.setWaypoints}\n          setPolyline={props.setPolyline}\n          makeDrivePathLayer={makeDrivePathLayer}\n          insertIndex={props.insertIndex}\n          setInsertIndex={props.setInsertIndex}\n        />\n        {/* <GeolocateControl\n          style={{ padding: 10, top: 70 }}\n          fitBoundsOptions={{ maxZoom: 18 }}\n          auto\n        /> */}\n      </DeckGL>\n    </Box>\n  );\n};\n\nconst Markers = (props: {\n  waypoints: Waypoint[];\n  setWaypoints: Function;\n  setPolyline: Function;\n  makeDrivePathLayer: Function;\n  insertIndex: number;\n  setInsertIndex: Function;\n}) => {\n  const markers = useMemo(\n    () =>\n      props.waypoints.map((waypoint, index) => (\n        <Marker\n          key={waypoint.key}\n          longitude={waypoint.lon}\n          latitude={waypoint.lat}\n          draggable\n          onClick={() => {\n            props.setInsertIndex(index + 1);\n          }}\n          onDragEnd={(event) => {\n            props.setWaypoints((wps: Waypoint[]) => {\n              let newWps = updateWaypoint(\n                { ...waypoint, lat: event.lngLat[1], lon: event.lngLat[0] },\n                wps\n              );\n              let pl = new CurveInterpolator(\n                newWps.map((wp) => [wp.lon, wp.lat]),\n                {\n                  tension: POLYLINE_SMOOTHING_FACTOR,\n                }\n              ).getPoints(POLYLINE_NUM_SEGMENTS);\n              props.setPolyline({\n                points: pl,\n                path: props.makeDrivePathLayer(pl),\n              });\n              return newWps;\n            });\n          }}\n        >\n          <WaypointMarker\n            waypoint={waypoint}\n            setWaypoints={props.setWaypoints}\n            onMap\n            highlight={index === props.insertIndex - 1}\n          />\n        </Marker>\n      )),\n    [props]\n  );\n  return <>{markers}</>;\n};\n","import { useState, useEffect } from \"react\";\n\n// Define general type for useWindowSize hook, which includes width and height\ninterface Size {\n  width: number | undefined;\n  height: number | undefined;\n}\n\nexport const useWindowSize = (): Size => {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState<Size>({\n    width: undefined,\n    height: undefined,\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n","import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n  const iconColor = useColorModeValue(\"gray.100\", \"gray.700\")\n  const bgColor = useColorModeValue(\"gray.700\", \"gray.100\")\n  const bgHoverColor = useColorModeValue(\"gray.700\", \"gray.200\")\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color={iconColor}\n      bg={bgColor}\n      _hover={{ bg: bgHoverColor }}\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import * as React from \"react\";\nimport { useColorModeValue, IconButton } from \"@chakra-ui/react\";\nimport { MdMap, MdPublic } from \"react-icons/md\";\n\nexport const MapSatelliteSwitcher: React.FC<any> = (props: {\n  satellite: boolean;\n  setSatellite: Function;\n  iconProps: any;\n}) => {\n  const SwitchIcon = props.satellite ? MdMap : MdPublic;\n  const iconColor = useColorModeValue(\"gray.100\", \"gray.700\");\n  const bgColor = useColorModeValue(\"gray.700\", \"gray.100\");\n  const bgHoverColor = useColorModeValue(\"gray.700\", \"gray.200\");\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color={iconColor}\n      bg={bgColor}\n      _hover={{ bg: bgHoverColor }}\n      marginLeft=\"2\"\n      onClick={() => props.setSatellite(!props.satellite)}\n      icon={<SwitchIcon />}\n      aria-label={`Toggle map/satellite mode`}\n      {...props.iconProps}\n    />\n  );\n};\n","import {\n  Button,\n  Flex,\n  Heading,\n  Input,\n  InputGroup,\n  InputLeftAddon,\n  InputRightElement,\n  Spacer,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport { FaGlobe } from \"react-icons/fa\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport { MapSatelliteSwitcher } from \"./MapSatelliteSwitcher\";\n\nexport const TopBar = (props: {\n  satellite: boolean;\n  setSatellite: Function;\n}) => {\n  const bgColor = useColorModeValue(\"gray.800\", \"white\");\n  const buttonColor = useColorModeValue(\"gray.700\", \"gray.100\");\n  const textColor = useColorModeValue(\"gray.100\", \"gray.800\");\n  const outlineColor = useColorModeValue(\"gray.400\", \"gray.800\");\n  const outlineColorHover = useColorModeValue(\"gray.500\", \"gray.600\");\n\n  return (\n    <Flex\n      w={\"100%\"}\n      bg={bgColor}\n      px={4}\n      py={3}\n      shadow=\"dark-lg\"\n      pointerEvents=\"auto\"\n    >\n      <Heading fontSize=\"3xl\" ps={2} color={textColor}>\n        ERacer Portal\n      </Heading>\n      <Spacer />\n      <InputGroup width={450} ms={4} borderColor={outlineColor}>\n        <InputLeftAddon\n          pointerEvents=\"none\"\n          fontSize=\"1em\"\n          color={textColor}\n          bg={buttonColor}\n          children={[\n            <FaGlobe key=\"eracer-globeicon\" />,\n            <Text ms={3} key=\"earcer-wsheader\">\n              ws://\n            </Text>,\n          ]}\n          borderColor={outlineColor}\n        />\n        <Input\n          placeholder=\"Websocket Address\"\n          _placeholder={{ color: outlineColorHover }}\n          color={textColor}\n          borderColor={outlineColor}\n          _hover={{ borderColor: outlineColorHover }}\n        />\n        <InputRightElement\n          w=\"fit-content\"\n          borderColor={outlineColor}\n          children={\n            <Button size=\"xs\" m={2} colorScheme=\"teal\">\n              Connect\n            </Button>\n          }\n        />\n      </InputGroup>\n      <ColorModeSwitcher ms={4} />\n      <MapSatelliteSwitcher\n        iconProps={{ ms: 4 }}\n        satellite={props.satellite}\n        setSatellite={props.setSatellite}\n      />\n    </Flex>\n  );\n};\n","import { Box, Text, useColorModeValue, Flex } from \"@chakra-ui/react\";\nimport { MdClose } from \"react-icons/md\";\nimport {\n  moveWaypoint,\n  removeWaypoint,\n  updateWaypoint,\n  Waypoint,\n} from \"../../../models/Waypoint\";\nimport { WaypointMarker } from \"../../util/WaypointMarker\";\nimport {\n  DragDropContext,\n  Draggable,\n  Droppable,\n  DroppableProvided,\n  DroppableStateSnapshot,\n  DropResult,\n} from \"react-beautiful-dnd\";\nimport { useCallback } from \"react\";\nimport { CurveInterpolator } from \"curve-interpolator\";\nimport {\n  makeDrivePathLayer,\n  POLYLINE_NUM_SEGMENTS,\n  POLYLINE_SMOOTHING_FACTOR,\n} from \"../../MapView/MapView\";\n\nexport const WaypointsList = (props: {\n  waypoints: Waypoint[];\n  setWaypoints: Function;\n  polyline: { points: any[]; path: any };\n  setPolyline: Function;\n  insertIndex: number;\n  setInsertIndex: Function;\n}) => {\n  const textBrightness = useColorModeValue(\".700\", \".400\");\n\n  const setWaypoints = props.setWaypoints;\n  const onDragEnd = useCallback(\n    (result: DropResult) => {\n      if (result.destination?.index !== undefined)\n        setWaypoints((wps: Waypoint[]) => {\n          let newWps = moveWaypoint(\n            result.source.index,\n            result.destination?.index!,\n            wps\n          );\n          let pl = new CurveInterpolator(\n            newWps.map((wp) => [wp.lon, wp.lat]),\n            {\n              tension: POLYLINE_SMOOTHING_FACTOR,\n            }\n          ).getPoints(POLYLINE_NUM_SEGMENTS);\n          props.setPolyline({\n            points: pl,\n            path: makeDrivePathLayer(pl),\n          });\n          return newWps;\n        });\n    },\n    // eslint-disable-next-line\n    [setWaypoints]\n  );\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Box h=\"100%\" style={{ overflow: \"auto\" }}>\n        <Droppable droppableId=\"eracer-waypoints\">\n          {(provided: DroppableProvided, snapshot: DroppableStateSnapshot) => (\n            <Box ref={provided.innerRef} {...provided.droppableProps}>\n              {props.waypoints.map((waypoint, ind) => (\n                <Draggable\n                  key={waypoint.key}\n                  draggableId={waypoint.key}\n                  index={ind}\n                >\n                  {(provided, snapshot) => (\n                    <Box\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                    >\n                      <Flex\n                        py={3}\n                        borderY=\"0.5px solid gray\"\n                        style={{ borderCollapse: \"collapse\" }}\n                        alignItems=\"center\"\n                        flexDirection=\"row\"\n                        key={waypoint.key}\n                        onMouseEnter={() => {\n                          props.setWaypoints((wps: Waypoint[]) =>\n                            updateWaypoint({ ...waypoint, active: true }, wps)\n                          );\n                        }}\n                        onMouseLeave={() => {\n                          props.setWaypoints((wps: Waypoint[]) =>\n                            updateWaypoint({ ...waypoint, active: false }, wps)\n                          );\n                        }}\n                        onClick={() => {\n                          props.setInsertIndex(ind + 1);\n                        }}\n                        pointerEvents=\"fill\"\n                      >\n                        <Box px={3}>\n                          <MdClose\n                            size={20}\n                            cursor=\"pointer\"\n                            onClick={() =>\n                              props.setWaypoints((wps: Waypoint[]) => {\n                                let newWps = removeWaypoint(waypoint, wps);\n                                let pl = newWps.length\n                                  ? new CurveInterpolator(\n                                    newWps.map((wp) => [wp.lon, wp.lat]),\n                                    {\n                                      tension: POLYLINE_SMOOTHING_FACTOR,\n                                    }\n                                  ).getPoints(POLYLINE_NUM_SEGMENTS)\n                                  : [];\n                                props.setPolyline({\n                                  points: pl,\n                                  path: makeDrivePathLayer(pl),\n                                });\n                                return newWps;\n                              })\n                            }\n                          />\n                        </Box>\n                        <Box px={2} pl={4}>\n                          <WaypointMarker\n                            waypoint={waypoint}\n                            setWaypoints={props.setWaypoints}\n                            highlight={ind === props.insertIndex - 1}\n                          />\n                        </Box>\n                        <Box px={2} fontSize=\"xs\" w=\"100%\">\n                          Lat: {waypoint.lat.toFixed(6)}\n                          <br />\n                          Lon: {waypoint.lon.toFixed(6)}\n                        </Box>\n                        <Box\n                          px={4}\n                          textAlign=\"right\"\n                          fontSize=\"md\"\n                        >\n                          <Text\n                            whiteSpace=\"nowrap\"\n                            textColor={`${\"red\"\n                              }${textBrightness}`}\n                            cursor=\"pointer\"\n                          >\n                          </Text>\n                        </Box>\n                      </Flex>\n                    </Box>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </Box>\n          )}\n        </Droppable>\n      </Box>\n    </DragDropContext>\n  );\n};\n","import { useColorModeValue } from \"@chakra-ui/color-mode\";\nimport { Box, Flex, Heading } from \"@chakra-ui/layout\";\nimport { ButtonGroup, Button } from \"@chakra-ui/react\";\nimport { useRef } from \"react\";\nimport { useCallback } from \"react\";\nimport { Waypoint } from \"../../models/Waypoint\";\nimport { WaypointsList } from \"./components/WaypointsList\";\nimport { CurveInterpolator } from \"curve-interpolator\";\nimport {\n  makeDrivePathLayer,\n  POLYLINE_NUM_SEGMENTS,\n  POLYLINE_SMOOTHING_FACTOR,\n} from \"../MapView/MapView\";\nvar fileDownload = require(\"js-file-download\");\n\nexport const ConfigPanel = (props: {\n  waypoints: Waypoint[];\n  setWaypoints: Function;\n  polyline: { points: any[]; path: any };\n  setPolyline: Function;\n  insertIndex: number;\n  setInsertIndex: Function;\n}) => {\n  const bgColor = useColorModeValue(\"gray.300\", \"gray.700\");\n  const cardColor = useColorModeValue(\"gray.400\", \"gray.600\");\n  const headerBrightness = useColorModeValue(\".300\", \".400\");\n\n  const setWaypoints = props.setWaypoints;\n  const setPolyline = props.setPolyline;\n\n  const clearWaypoints = useCallback(() => {\n    setWaypoints(() => {\n      setPolyline({\n        points: [],\n        path: makeDrivePathLayer([]),\n      });\n      return [];\n    });\n  }, [setWaypoints, setPolyline]);\n\n  const saveWaypoints = useCallback(() => {\n    fileDownload(JSON.stringify(props.waypoints, null, 2), \"waypoints.json\");\n  }, [props.waypoints]);\n\n  const loadJsonInput = useRef(null);\n  const loadWaypoints = useCallback(\n    (event) => {\n      let file = event.target.files[0];\n      if (file) {\n        let reader = new FileReader();\n        reader.onload = function (event) {\n          setWaypoints(() => {\n            // @ts-ignore TS2531\n            let newWps = JSON.parse(event.target.result);\n            if (newWps.length) {\n              let pl = new CurveInterpolator(\n                newWps.map((wp: { lon: any; lat: any }) => [wp.lon, wp.lat]),\n                {\n                  tension: POLYLINE_SMOOTHING_FACTOR,\n                }\n              ).getPoints(POLYLINE_NUM_SEGMENTS);\n              setPolyline({\n                points: pl,\n                path: makeDrivePathLayer(pl),\n              });\n              props.setInsertIndex(newWps.length);\n            }\n            return newWps;\n          });\n        };\n        reader.readAsText(file);\n      }\n    },\n    [setWaypoints, setPolyline, props]\n  );\n\n  return (\n    <Flex\n      shadow=\"dark-lg\"\n      rounded=\"lg\"\n      flex={1}\n      alignSelf=\"flex-end\"\n      w=\"30%\"\n      minW={300}\n      maxW={450}\n      m={4}\n      overflow=\"hidden\"\n      bg={bgColor}\n      pointerEvents=\"auto\"\n      flexDirection=\"column\"\n    >\n      <Flex\n        bg={cardColor}\n        h={300}\n        m={5}\n        rounded=\"lg\"\n        flexDirection=\"column\"\n        overflow=\"hidden\"\n      >\n        <Flex bg={`red${headerBrightness}`} w=\"100%\" py={2} px={4}>\n          <Heading fontSize=\"2xl\" me=\"auto\">\n            Waypoints\n          </Heading>\n          <ButtonGroup\n            size=\"sm\"\n            isAttached\n            variant=\"solid\"\n            colorScheme=\"blackAlpha\"\n          >\n            <Button onClick={clearWaypoints}>Clear</Button>\n            <input\n              ref={loadJsonInput}\n              type=\"file\"\n              onChange={loadWaypoints}\n              style={{ display: \"none\" }}\n            />\n            <Button\n              onClick={() =>\n                // @ts-ignore: Object is possibly 'null'.\n                loadJsonInput.current.click()\n              }\n            >\n              Load\n            </Button>\n            <Button onClick={saveWaypoints}>Save</Button>\n          </ButtonGroup>\n        </Flex>\n        <Box flex={1} style={{ overflow: \"auto\" }}>\n          <WaypointsList\n            waypoints={props.waypoints}\n            setWaypoints={props.setWaypoints}\n            polyline={props.polyline}\n            setPolyline={props.setPolyline}\n            insertIndex={props.insertIndex}\n            setInsertIndex={props.setInsertIndex}\n          />\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n","import { useState } from \"react\";\nimport { Flex } from \"@chakra-ui/react\";\nimport { MapView } from \"./components/MapView/MapView\";\nimport { TopBar } from \"./components/util/TopBar\";\nimport { ConfigPanel } from \"./components/ConfigPanel/ConfigPanel\";\n\nimport { Waypoint } from \"./models/Waypoint\";\n\nexport const App = () => {\n  const [waypoints, setWaypoints] = useState<Waypoint[]>([]);\n  const [polyline, setPolyline] = useState({} as { points: any[]; path: any });\n  const [satellite, setSatellite] = useState(true);\n  const [insertIndex, setInsertIndex] = useState(0);\n\n  return (\n    <>\n      <Flex minH=\"100vh\" maxH=\"100vh\">\n        <MapView\n          satellite={satellite}\n          waypoints={waypoints}\n          setWaypoints={setWaypoints}\n          polyline={polyline}\n          setPolyline={setPolyline}\n          insertIndex={insertIndex}\n          setInsertIndex={setInsertIndex}\n        />\n      </Flex>\n      <Flex\n        position=\"absolute\"\n        top={0}\n        left={0}\n        minH=\"100vh\"\n        maxH=\"100vh\"\n        minW=\"100vw\"\n        maxW=\"100vw\"\n        direction=\"column\"\n        textAlign=\"center\"\n        fontSize=\"xl\"\n        pointerEvents=\"none\"\n      >\n        <TopBar satellite={satellite} setSatellite={setSatellite} />\n        <ConfigPanel\n          waypoints={waypoints}\n          setWaypoints={setWaypoints}\n          polyline={polyline}\n          setPolyline={setPolyline}\n          insertIndex={insertIndex}\n          setInsertIndex={setInsertIndex}\n        />\n      </Flex>\n    </>\n  );\n};\n","import { extendTheme, ThemeConfig } from \"@chakra-ui/react\";\n\nconst config: ThemeConfig = {\n  initialColorMode: \"light\",\n  useSystemColorMode: true,\n};\n\nconst theme = extendTheme({ config });\nexport default theme;\n","import { ColorModeScript, ChakraProvider } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}