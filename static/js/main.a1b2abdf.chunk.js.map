{"version":3,"sources":["models/Waypoint.ts","components/util/WaypointMarker.tsx","components/MapView/MapView.tsx","hooks/useWindowSize.ts","components/util/ColorModeSwitcher.tsx","components/util/TopBar.tsx","components/ConfigPanel/components/WaypointsList.tsx","components/ConfigPanel/ConfigPanel.tsx","App.tsx","theme.ts","index.tsx"],"names":["updateWaypoint","newWaypoint","waypoints","newWaypoints","Array","from","findIndex","x","key","WaypointMarker","props","iconColor","useColorModeValue","onMouseEnter","onMap","setWaypoints","wps","waypoint","active","onMouseLeave","size","style","translate","color","fullStop","zIndex","defaultProps","mapboxgl","workerClass","require","default","MapView","colorMode","mapContainer","useRef","useState","width","undefined","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","polyline","setPolyline","makeDrivePathLayer","pl","PathLayer","id","data","path","name","rounded","pickable","widthScale","widthMinPixels","widthMaxPixels","getColor","onClick","useCallback","event","lon","lat","newWps","coordinate","uuid","CurveInterpolator","map","wp","tension","getPoints","points","flex","display","ref","initialViewState","latitude","longitude","zoom","bearing","pitch","controller","touchRotate","touchZoom","layers","ContextProvider","_MapContext","Provider","mapStyle","attributionControl","padding","top","fitBoundsOptions","maxZoom","auto","Markers","markers","useMemo","draggable","onDragEnd","lngLat","ColorModeSwitcher","toggleColorMode","useColorMode","text","SwitchIcon","FaMoon","FaSun","bgColor","bgHoverColor","fontSize","variant","bg","_hover","marginLeft","icon","aria-label","TopBar","buttonColor","textColor","outlineColor","outlineColorHover","w","px","py","shadow","pointerEvents","ps","ms","borderColor","children","placeholder","_placeholder","m","colorScheme","WaypointsList","textBrightness","result","destination","index","waypointIndex","destinationIndex","source","arrayMove","h","overflow","droppableId","provided","snapshot","innerRef","droppableProps","ind","draggableId","draggableProps","dragHandleProps","borderY","borderCollapse","alignItems","flexDirection","cursor","splice","removeWaypoint","toFixed","textAlign","whiteSpace","ConfigPanel","cardColor","headerBrightness","alignSelf","minW","maxW","App","minH","maxH","position","left","direction","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1b2abdf.chunk.js","sourcesContent":["import arrayMove from \"array-move\";\nimport { v4 as uuid } from \"uuid\";\n\nexport type Waypoint = {\n  key: string;\n  lat: number;\n  lon: number;\n  fullStop: boolean;\n  active: boolean;\n};\n\n// All of these functions return a modified copy of the waypoints array without\n// modifying the original. This is important so that React can properly manage\n// state and detect changes in the waypoints array, rerendering only what's needed.\nexport function updateWaypoint(newWaypoint: Waypoint, waypoints: Waypoint[]) {\n  let newWaypoints = Array.from(waypoints); // make copy\n  newWaypoints[waypoints.findIndex((x) => x.key === newWaypoint.key)] =\n    newWaypoint;\n  return newWaypoints;\n}\n\nexport function addWaypoint(newWaypoint: Waypoint, waypoints: Waypoint[]) {\n  return [...waypoints, newWaypoint];\n}\n\nexport function removeWaypoint(waypoint: Waypoint, waypoints: Waypoint[]) {\n  let newWaypoints = Array.from(waypoints); // make copy\n  newWaypoints.splice(\n    waypoints.findIndex((x) => x.key === waypoint.key),\n    1\n  );\n  return newWaypoints;\n}\n\nexport function moveWaypoint(\n  waypointIndex: number,\n  destinationIndex: number,\n  waypoints: Waypoint[]\n) {\n  return arrayMove(waypoints, waypointIndex, destinationIndex);\n}\n\nexport function newWaypoint(lon: number, lat: number) {\n  return {\n    key: uuid(),\n    lat: lat,\n    lon: lon,\n    fullStop: true,\n    active: false,\n  } as Waypoint;\n}\n","import { useColorModeValue } from \"@chakra-ui/react\";\nimport { FaMapMarker } from \"react-icons/fa\";\nimport { updateWaypoint, Waypoint } from \"../../models/Waypoint\";\n\nexport const WaypointMarker = (props: {\n  waypoint: Waypoint;\n  setWaypoints: Function;\n  onMap: boolean;\n}) => {\n  const iconColor = useColorModeValue(\"black\", \"white\");\n\n  return (\n    <FaMapMarker\n      onMouseEnter={() => {\n        if (props.onMap)\n          props.setWaypoints((wps: Waypoint[]) =>\n            updateWaypoint({ ...props.waypoint, active: true }, wps)\n          );\n      }}\n      onMouseLeave={() => {\n        if (props.onMap)\n          props.setWaypoints((wps: Waypoint[]) =>\n            updateWaypoint({ ...props.waypoint, active: false }, wps)\n          );\n      }}\n      size={props.onMap ? 35 : 30}\n      style={{\n        translate: props.onMap ? \"-50% -100%\" : \"\",\n        color: `var(--chakra-colors-${\n          props.waypoint.active\n            ? iconColor\n            : props.waypoint.fullStop\n            ? \"red-500\"\n            : \"teal-400\"\n        })`,\n        zIndex: 1,\n      }}\n    />\n  );\n};\nWaypointMarker.defaultProps = { onMap: false, active: false, fullStop: false };\n","import { Box } from \"@chakra-ui/layout\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nimport { useRef, useState } from \"react\";\nimport { GeolocateControl, Marker, StaticMap, _MapContext } from \"react-map-gl\";\n\nimport DeckGL from \"@deck.gl/react\";\nimport { PathLayer } from \"@deck.gl/layers\";\n\nimport mapboxgl from \"mapbox-gl\";\n\nimport { useWindowSize } from \"../../hooks/useWindowSize\";\nimport { useColorModeValue } from \"@chakra-ui/color-mode\";\n\nimport \"./mapview.scss\";\nimport {\n  addWaypoint,\n  newWaypoint,\n  updateWaypoint,\n  Waypoint,\n} from \"../../models/Waypoint\";\nimport { WaypointMarker } from \"../util/WaypointMarker\";\n\nimport { CurveInterpolator } from \"curve-interpolator\";\nimport { useMemo } from \"react\";\nimport { useCallback } from \"react\";\n\n/* eslint-disable import/no-webpack-loader-syntax, import/no-unresolved */\n// @ts-ignore\nmapboxgl.workerClass =\n  require(\"worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker\").default;\n/* eslint-enable import/no-webpack-loader-syntax, import/no-unresolved */\n\nconst POLYLINE_SMOOTHING_FACTOR = 0.5;\nconst POLYLINE_NUM_SEGMENTS = 1000;\n\nexport const MapView = (props: {\n  waypoints: Waypoint[];\n  setWaypoints: Function;\n}) => {\n  const colorMode = useColorModeValue(\"light\", \"dark\");\n\n  const mapContainer = useRef(null);\n  const { width, height } = useWindowSize();\n\n  const viewport = {\n    latitude: 0,\n    longitude: 0,\n    zoom: 18,\n    bearing: 0,\n    pitch: 0,\n  };\n\n  const [polyline, setPolyline] = useState({} as { points: any[]; path: any });\n\n  const makeDrivePathLayer = (pl: any) =>\n    new PathLayer({\n      id: \"drive-path-layer\",\n      data: [\n        {\n          path: pl,\n          name: \"\",\n        },\n      ],\n      rounded: true,\n      pickable: false,\n      widthScale: 2,\n      widthMinPixels: 2,\n      widthMaxPixels: 6,\n      getColor: [11, 197, 234],\n    });\n\n  const onClick = useCallback((event) => {\n    props.setWaypoints((wps: Waypoint[]) => {\n      let newWps = addWaypoint(\n        newWaypoint(event.coordinate[0], event.coordinate[1]),\n        wps\n      );\n      let pl = new CurveInterpolator(\n        newWps.map((wp) => [wp.lon, wp.lat]),\n        {\n          tension: POLYLINE_SMOOTHING_FACTOR,\n        }\n      ).getPoints(POLYLINE_NUM_SEGMENTS);\n      setPolyline({\n        points: pl,\n        path: makeDrivePathLayer(pl),\n      });\n      return newWps;\n    });\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <Box flex={1} display=\"block\" ref={mapContainer}>\n      <DeckGL\n        initialViewState={viewport}\n        controller={{ touchRotate: true, touchZoom: true }}\n        onClick={onClick}\n        layers={[polyline.path]}\n        // @ts-ignore\n        ContextProvider={_MapContext.Provider}\n      >\n        <StaticMap\n          mapStyle={`mapbox://styles/mapbox/${colorMode}-v10`}\n          // mapStyle=\"mapbox://styles/mapbox/satellite-streets-v11\"\n          width={width}\n          height={height}\n          attributionControl={false}\n        >\n          <GeolocateControl\n            style={{ padding: 10, top: 70 }}\n            fitBoundsOptions={{ maxZoom: 18 }}\n            auto\n          />\n        </StaticMap>\n        <Markers\n          waypoints={props.waypoints}\n          setWaypoints={props.setWaypoints}\n        />\n      </DeckGL>\n    </Box>\n  );\n};\n\nconst Markers = (props: { waypoints: Waypoint[]; setWaypoints: Function }) => {\n  const markers = useMemo(\n    () =>\n      props.waypoints.map((waypoint) => (\n        <Marker\n          key={waypoint.key}\n          longitude={waypoint.lon}\n          latitude={waypoint.lat}\n          draggable\n          onDragEnd={(event) => {\n            props.setWaypoints((wps: Waypoint[]) =>\n              updateWaypoint(\n                { ...waypoint, lat: event.lngLat[1], lon: event.lngLat[0] },\n                wps\n              )\n            );\n          }}\n        >\n          <WaypointMarker\n            waypoint={waypoint}\n            setWaypoints={props.setWaypoints}\n            onMap\n          />\n        </Marker>\n      )),\n    [props]\n  );\n  return <>{markers}</>;\n};\n","import { useState, useEffect } from \"react\";\n\n// Define general type for useWindowSize hook, which includes width and height\ninterface Size {\n  width: number | undefined;\n  height: number | undefined;\n}\n\nexport const useWindowSize = (): Size => {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState<Size>({\n    width: undefined,\n    height: undefined,\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n","import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n  const iconColor = useColorModeValue(\"gray.100\", \"gray.700\")\n  const bgColor = useColorModeValue(\"gray.700\", \"gray.100\")\n  const bgHoverColor = useColorModeValue(\"gray.700\", \"gray.200\")\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color={iconColor}\n      bg={bgColor}\n      _hover={{ bg: bgHoverColor }}\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import {\n  Button,\n  Flex,\n  Heading,\n  Input,\n  InputGroup,\n  InputLeftAddon,\n  InputRightElement,\n  Spacer,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport { FaGlobe } from \"react-icons/fa\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\n\nexport const TopBar = () => {\n  const bgColor = useColorModeValue(\"gray.800\", \"white\");\n  const buttonColor = useColorModeValue(\"gray.700\", \"gray.100\");\n  const textColor = useColorModeValue(\"gray.100\", \"gray.800\");\n  const outlineColor = useColorModeValue(\"gray.400\", \"gray.800\");\n  const outlineColorHover = useColorModeValue(\"gray.500\", \"gray.600\");\n\n  return (\n    <Flex\n      w={\"100%\"}\n      bg={bgColor}\n      px={4}\n      py={3}\n      shadow=\"dark-lg\"\n      pointerEvents=\"auto\"\n    >\n      <Heading fontSize=\"3xl\" ps={2} color={textColor}>\n        ERacer Portal\n      </Heading>\n      <Spacer />\n      <InputGroup width={450} ms={4} borderColor={outlineColor}>\n        <InputLeftAddon\n          pointerEvents=\"none\"\n          fontSize=\"1em\"\n          color={textColor}\n          bg={buttonColor}\n          children={[<FaGlobe key=\"eracer-globeicon\"/>, <Text ms={3} key=\"earcer-wsheader\">ws://</Text>]}\n          borderColor={outlineColor}\n        />\n        <Input\n          placeholder=\"Websocket Address\"\n          _placeholder={{ color: outlineColorHover }}\n          color={textColor}\n          borderColor={outlineColor}\n          _hover={{ borderColor: outlineColorHover }}\n        />\n        <InputRightElement\n          w=\"fit-content\"\n          borderColor={outlineColor}\n          children={\n            <Button size=\"xs\" m={2} colorScheme=\"teal\">\n              Connect\n            </Button>\n          }\n        />\n      </InputGroup>\n      <ColorModeSwitcher ms={4} />\n    </Flex>\n  );\n};\n","import { Box, Text, useColorModeValue, Flex } from \"@chakra-ui/react\";\nimport { MdClose } from \"react-icons/md\";\nimport {\n  moveWaypoint,\n  removeWaypoint,\n  updateWaypoint,\n  Waypoint,\n} from \"../../../models/Waypoint\";\nimport { WaypointMarker } from \"../../util/WaypointMarker\";\nimport {\n  DragDropContext,\n  Draggable,\n  Droppable,\n  DroppableProvided,\n  DroppableStateSnapshot,\n  DropResult,\n} from \"react-beautiful-dnd\";\nimport { useCallback } from \"react\";\n\nexport const WaypointsList = (props: {\n  waypoints: Waypoint[];\n  setWaypoints: Function;\n}) => {\n  const textBrightness = useColorModeValue(\".700\", \".400\");\n\n  const setWaypoints = props.setWaypoints;\n  const onDragEnd = useCallback(\n    (result: DropResult) => {\n      if (result.destination?.index !== undefined)\n        setWaypoints((wps: Waypoint[]) =>\n          moveWaypoint(result.source.index, result.destination?.index!, wps)\n        );\n    },\n    [setWaypoints]\n  );\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Box h=\"100%\" style={{ overflow: \"auto\" }}>\n        <Droppable droppableId=\"eracer-waypoints\">\n          {(provided: DroppableProvided, snapshot: DroppableStateSnapshot) => (\n            <Box ref={provided.innerRef} {...provided.droppableProps}>\n              {props.waypoints.map((waypoint, ind) => (\n                <Draggable\n                  key={waypoint.key}\n                  draggableId={waypoint.key}\n                  index={ind}\n                >\n                  {(provided, snapshot) => (\n                    <Box\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                    >\n                      <Flex\n                        py={3}\n                        borderY=\"0.5px solid gray\"\n                        style={{ borderCollapse: \"collapse\" }}\n                        alignItems=\"center\"\n                        flexDirection=\"row\"\n                        key={waypoint.key}\n                        onMouseEnter={() => {\n                          props.setWaypoints((wps: Waypoint[]) =>\n                            updateWaypoint({ ...waypoint, active: true }, wps)\n                          );\n                        }}\n                        onMouseLeave={() => {\n                          props.setWaypoints((wps: Waypoint[]) =>\n                            updateWaypoint({ ...waypoint, active: false }, wps)\n                          );\n                        }}\n                        pointerEvents=\"fill\"\n                      >\n                        <Box px={3}>\n                          <MdClose\n                            size={20}\n                            cursor=\"pointer\"\n                            onClick={() =>\n                              props.setWaypoints((wps: Waypoint[]) =>\n                                removeWaypoint(waypoint, wps)\n                              )\n                            }\n                          />\n                        </Box>\n                        <Box px={2} pl={4}>\n                          <WaypointMarker\n                            waypoint={waypoint}\n                            setWaypoints={props.setWaypoints}\n                          />\n                        </Box>\n                        <Box px={2} fontSize=\"xs\" w=\"100%\">\n                          Lat: {waypoint.lat.toFixed(6)}\n                          <br />\n                          Lon: {waypoint.lon.toFixed(6)}\n                        </Box>\n                        <Box\n                          px={4}\n                          textAlign=\"right\"\n                          fontSize=\"md\"\n                          onClick={() => {\n                            props.setWaypoints((wps: Waypoint[]) =>\n                              updateWaypoint(\n                                { ...waypoint, fullStop: !waypoint.fullStop },\n                                wps\n                              )\n                            );\n                          }}\n                        >\n                          <Text\n                            whiteSpace=\"nowrap\"\n                            textColor={`${\n                              waypoint.fullStop ? \"red\" : \"teal\"\n                            }${textBrightness}`}\n                            cursor=\"pointer\"\n                          >\n                            {waypoint.fullStop ? \"Full Stop\" : \"Coast\"}\n                          </Text>\n                        </Box>\n                      </Flex>\n                    </Box>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </Box>\n          )}\n        </Droppable>\n      </Box>\n    </DragDropContext>\n  );\n};\n","import { useColorModeValue } from \"@chakra-ui/color-mode\";\nimport { Box, Flex, Heading } from \"@chakra-ui/layout\";\nimport { Waypoint } from \"../../models/Waypoint\";\nimport { WaypointsList } from \"./components/WaypointsList\";\n\nexport const ConfigPanel = (props: {\n  waypoints: Waypoint[];\n  setWaypoints: Function;\n}) => {\n  const bgColor = useColorModeValue(\"gray.300\", \"gray.700\");\n  const cardColor = useColorModeValue(\"gray.400\", \"gray.600\");\n  const headerBrightness = useColorModeValue(\".300\", \".400\");\n\n  return (\n    <Flex\n      shadow=\"dark-lg\"\n      rounded=\"lg\"\n      flex={1}\n      alignSelf=\"flex-end\"\n      w=\"30%\"\n      minW={300}\n      maxW={450}\n      m={4}\n      overflow=\"hidden\"\n      bg={bgColor}\n      pointerEvents=\"auto\"\n      flexDirection=\"column\"\n    >\n      <Flex\n        bg={cardColor}\n        h={300}\n        m={5}\n        rounded=\"lg\"\n        flexDirection=\"column\"\n        overflow=\"hidden\"\n      >\n        <Flex bg={`red${headerBrightness}`} w=\"100%\" py={2} px={4}>\n          <Heading fontSize=\"2xl\">Waypoints</Heading>\n        </Flex>\n        <Box flex={1} style={{ overflow: \"auto\" }}>\n          <WaypointsList\n            waypoints={props.waypoints}\n            setWaypoints={props.setWaypoints}\n          />\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n","import { useState } from \"react\";\nimport { Flex } from \"@chakra-ui/react\";\nimport { MapView } from \"./components/MapView/MapView\";\nimport { TopBar } from \"./components/util/TopBar\";\nimport { ConfigPanel } from \"./components/ConfigPanel/ConfigPanel\";\n\nimport { Waypoint } from \"./models/Waypoint\";\n\nexport const App = () => {\n  const [waypoints, setWaypoints] = useState<Waypoint[]>([]);\n\n  return (\n    <>\n      <Flex minH=\"100vh\" maxH=\"100vh\">\n        <MapView waypoints={waypoints} setWaypoints={setWaypoints} />\n      </Flex>\n      <Flex\n        position=\"absolute\"\n        top={0}\n        left={0}\n        minH=\"100vh\"\n        maxH=\"100vh\"\n        minW=\"100vw\"\n        maxW=\"100vw\"\n        direction=\"column\"\n        textAlign=\"center\"\n        fontSize=\"xl\"\n        pointerEvents=\"none\"\n      >\n        <TopBar />\n        <ConfigPanel waypoints={waypoints} setWaypoints={setWaypoints} />\n      </Flex>\n    </>\n  );\n};\n","import { extendTheme, ThemeConfig } from \"@chakra-ui/react\";\n\nconst config: ThemeConfig = {\n  initialColorMode: \"light\",\n  useSystemColorMode: true,\n};\n\nconst theme = extendTheme({ config });\nexport default theme;\n","import { ColorModeScript, ChakraProvider } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}