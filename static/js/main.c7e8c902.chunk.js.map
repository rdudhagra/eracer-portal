{"version":3,"sources":["theme.ts","components/MapView/MapView.tsx","hooks/useWindowSize.ts","components/util/ColorModeSwitcher.tsx","components/util/TopBar.tsx","components/ConfigPanel/ConfigPanel.jsx","App.tsx","index.tsx"],"names":["theme","extendTheme","config","initialColorMode","useSystemColorMode","MapView","colorMode","useColorModeValue","mapContainer","useRef","useState","width","undefined","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","latitude","longitude","zoom","viewport","setViewport","flex","display","ref","mapStyle","onViewportChange","nextViewport","attributionControl","style","padding","fitBoundsOptions","maxZoom","auto","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","SwitchIcon","FaMoon","FaSun","iconColor","bgColor","bgHoverColor","size","fontSize","variant","color","bg","_hover","marginLeft","onClick","icon","aria-label","TopBar","buttonColor","textColor","outlineColor","outlineColorHover","w","px","py","shadow","pointerEvents","ps","ms","borderColor","children","placeholder","_placeholder","m","colorScheme","ConfigPanel","rounded","alignSelf","minW","overflow","App","minH","maxH","position","top","left","maxW","direction","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7e8c902.chunk.js","sourcesContent":["import { extendTheme, ThemeConfig } from \"@chakra-ui/react\";\n\nconst config: ThemeConfig = {\n  initialColorMode: \"light\",\n  useSystemColorMode: true,\n};\n\nconst theme = extendTheme({ config });\nexport default theme;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nimport React, { useRef, useState } from \"react\";\nimport MapGl, { GeolocateControl } from \"react-map-gl\";\nimport { useWindowSize } from \"../../hooks/useWindowSize\";\nimport { useColorModeValue } from \"@chakra-ui/color-mode\";\n\nimport \"./mapview.scss\";\n\nexport const MapView = () => {\n  const colorMode = useColorModeValue(\"light\", \"dark\");\n\n  const mapContainer = useRef(null);\n  const { width, height } = useWindowSize();\n\n  const [viewport, setViewport] = useState({\n    latitude: 0,\n    longitude: 0,\n    zoom: 18,\n  });\n\n  return (\n    <Box flex={1} display=\"block\" ref={mapContainer}>\n      <MapGl\n        mapStyle={`mapbox://styles/mapbox/${colorMode}-v10`}\n        {...viewport}\n        onViewportChange={(\n          nextViewport: React.SetStateAction<{\n            latitude: number;\n            longitude: number;\n            zoom: number;\n          }>\n        ) => setViewport(nextViewport)}\n        width={width}\n        height={height}\n        attributionControl={false}\n      >\n        <GeolocateControl\n          style={{ padding: 10 }}\n          fitBoundsOptions={{ maxZoom: 18 }}\n          auto\n        />\n      </MapGl>\n    </Box>\n  );\n};\n","import { useState, useEffect } from \"react\";\n\n// Define general type for useWindowSize hook, which includes width and height\ninterface Size {\n  width: number | undefined;\n  height: number | undefined;\n}\n\nexport const useWindowSize = (): Size => {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState<Size>({\n    width: undefined,\n    height: undefined,\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n","import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n  const iconColor = useColorModeValue(\"gray.100\", \"gray.700\")\n  const bgColor = useColorModeValue(\"gray.700\", \"gray.100\")\n  const bgHoverColor = useColorModeValue(\"gray.700\", \"gray.200\")\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color={iconColor}\n      bg={bgColor}\n      _hover={{ bg: bgHoverColor }}\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import {\n  Button,\n  Flex,\n  Heading,\n  Input,\n  InputGroup,\n  InputLeftAddon,\n  InputRightElement,\n  Spacer,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport { FaGlobe } from \"react-icons/fa\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\n\nexport const TopBar = () => {\n  const bgColor = useColorModeValue(\"gray.800\", \"white\");\n  const buttonColor = useColorModeValue(\"gray.700\", \"gray.100\");\n  const textColor = useColorModeValue(\"gray.100\", \"gray.800\");\n  const outlineColor = useColorModeValue(\"gray.400\", \"gray.800\");\n  const outlineColorHover = useColorModeValue(\"gray.500\", \"gray.600\");\n\n  return (\n    <Flex\n      w={\"100%\"}\n      bg={bgColor}\n      px={4}\n      py={3}\n      shadow=\"dark-lg\"\n      pointerEvents=\"auto\"\n    >\n      <Heading fontSize=\"3xl\" ps={2} color={textColor}>\n        ERacer Portal\n      </Heading>\n      <Spacer />\n      <InputGroup width={450} ms={4} borderColor={outlineColor}>\n        <InputLeftAddon\n          pointerEvents=\"none\"\n          fontSize=\"1em\"\n          color={textColor}\n          bg={buttonColor}\n          children={[<FaGlobe />, <Text ms={3}>ws://</Text>]}\n          borderColor={outlineColor}\n        />\n        <Input\n          placeholder=\"Websocket Address\"\n          _placeholder={{ color: outlineColorHover }}\n          color={textColor}\n          borderColor={outlineColor}\n          _hover={{ borderColor: outlineColorHover }}\n        />\n        <InputRightElement\n          w=\"fit-content\"\n          borderColor={outlineColor}\n          children={\n            <Button size=\"xs\" m={2} colorScheme=\"teal\">\n              Connect\n            </Button>\n          }\n        />\n      </InputGroup>\n      <ColorModeSwitcher ms={4} />\n    </Flex>\n  );\n};\n","import { useColorModeValue } from \"@chakra-ui/color-mode\";\nimport { Flex } from \"@chakra-ui/layout\";\n\nexport const ConfigPanel = () => {\n  const bgColor = useColorModeValue(\"gray.300\", \"gray.700\")\n  return (\n    <Flex\n      shadow=\"dark-lg\"\n      rounded=\"lg\"\n      flex={1}\n      alignSelf=\"flex-end\"\n      w=\"30%\"\n      minW={200}\n      m={4}\n      overflow=\"hidden\"\n      bg={bgColor}\n      pointerEvents=\"auto\"\n    ></Flex>\n  );\n};\n","import * as React from \"react\";\nimport { ChakraProvider, Flex } from \"@chakra-ui/react\";\nimport theme from \"./theme\";\nimport { MapView } from \"./components/MapView/MapView\";\nimport { TopBar } from \"./components/util/TopBar\";\nimport { ConfigPanel } from \"./components/ConfigPanel/ConfigPanel\";\n\nexport const App = () => {\n  return (\n    <ChakraProvider theme={theme}>\n      <Flex minH=\"100vh\" maxH=\"100vh\">\n        <MapView />\n      </Flex>\n      <Flex\n        position=\"absolute\"\n        top={0}\n        left={0}\n        minH=\"100vh\"\n        maxH=\"100vh\"\n        minW=\"100vw\"\n        maxW=\"100vw\"\n        direction=\"column\"\n        textAlign=\"center\"\n        fontSize=\"xl\"\n        pointerEvents=\"none\"\n      >\n        <TopBar />\n        <ConfigPanel />\n      </Flex>\n    </ChakraProvider>\n  );\n};\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}